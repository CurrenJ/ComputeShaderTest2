// Each #kernel tells which function to compile; you can have many kernels
// kernel 0
#pragma kernel UpdateAgents
uint width;
uint height;
uint numAgents;
float decayFactor;
float diffuseFactor;
float deltaTime;
float time;

int3 redHome;
int3 greenHome;
int3 blueHome;

float4 bgColor;


bool useHsvForColorRemapping;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float3 rgb2hsv(float3 c)
{
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

struct Agent {
    float2 position;
    float angle;
	int4 speciesMaskAndTrailType;
};

struct TeamSettings {
    float turnFactor;
    float moveSpeed;
    float sensorAngleOffset;
    float sensorPosOffset;
    float sensorRadius;
   	float4 teamColor;
};

RWTexture2D<float4> TrailMap;
RWTexture2D<float> ObstructionMap;
// X = Red Home, Y = Green Home, Z = Blue Home, W = Food
RWTexture2D<float4> HomeFoodTrailMap;
RWTexture2D<float4> PlayerMap;
RWStructuredBuffer<Agent> agents;

RWStructuredBuffer<TeamSettings> teamSettings;

float4 ColorLerp(float4 t){
	// Midnight
    // float4 a = float4(0.388235294, 0.11372549, 0.462745098, 1.0);
	// // Magenta Haze
	// float4 b = float4(0.619607843, 0.278431373, 0.439215686, 1.0);
	// // White
	// float4 c = float4(0.984313725, 0.984313725, 0.984313725, 1.0);
	// Background Color
	// float bg = float4(0.180392157, 0.145098039, 0.196078431, 1.0);

	if(!useHsvForColorRemapping)
		return lerp(lerp(lerp(bgColor, teamSettings[0].teamColor, t.x), teamSettings[1].teamColor, t.y), teamSettings[2].teamColor, t.z);

	float3 bg = rgb2hsv(bgColor);


	float rgbSum = t.x + t.y + t.z;
	float3 hsvLerped = rgb2hsv(teamSettings[0].teamColor * (t.x / rgbSum) + teamSettings[1].teamColor * (t.y / rgbSum) + teamSettings[2].teamColor * (t.z / rgbSum));
	float bgAmount = (1 - sqrt(max(t.x, max(t.y, t.z))));
	hsvLerped.y = lerp(hsvLerped.y, bg.y, bgAmount);
	hsvLerped.z = lerp(hsvLerped.z, bg.z, bgAmount);
	float3 rgbLerped = lerp(hsv2rgb(hsvLerped), bgColor, bgAmount);
	if(t.x == 0 && t.y == 0 && t.z == 0)
		rgbLerped = bgColor;

	// 	float myMax = max(t.x, max(t.y, t.z));
	// float3 rgbLerped = teamColorA;
	// if(myMax == t.x) {
	// 	rgbLerped = teamColorA;
	// } else if(myMax == t.y) {
	// 	rgbLerped = teamColorB;
	// } else rgbLerped = teamColorC;
	// float bgAmount = (1 - max(t.x, max(t.y, t.z)));
	// rgbLerped = lerp(rgbLerped, bgColor, bgAmount);

	return float4(rgbLerped.x, rgbLerped.y, rgbLerped.z, 1);
}

float sense(Agent agent, float direction /* L=-1, 0, R=1 */, TeamSettings currentTeamSettings) {
	float sensorAngle = agent.angle + direction * (currentTeamSettings.sensorAngleOffset * (3.141592653f / 180));
	float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

	float2 sensorPos = agent.position + sensorDir * currentTeamSettings.sensorPosOffset;
	int sensorCentreX = (int) sensorPos.x;
	int sensorCentreY = (int) sensorPos.y;

	
	float sum = 0;

	// Default, food-seeking. W is food trails
	int4 senseWeight = agent.speciesMaskAndTrailType * 2 - 1;
	// senseWeight.w = 1;
	// //When holding, follow species trail home.
	// if (agent.speciesMaskAndTrailType.w == 1) {
	// 	senseWeight = agent.speciesMaskAndTrailType * 2 - 1;
	// 	senseWeight.w = -1;
	// }
	// int4 senseWeight = agent.speciesMaskAndTrailType * 2 - 1;

	for (int offsetX = -currentTeamSettings.sensorRadius; offsetX <= currentTeamSettings.sensorRadius; offsetX ++) {
		for (int offsetY = -currentTeamSettings.sensorRadius; offsetY <= currentTeamSettings.sensorRadius; offsetY ++) {
			int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
			int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));
			sum += dot(senseWeight, TrailMap[int2(sampleX,sampleY)]);
		}
	}

	return sum;
}

float GetObstructed(float2 position){
	return ObstructionMap[position];
}

int2 manhattan(int2 a, int2 b){
	return abs(b.x - a.x) + abs(b.y - a.y);
}

[numthreads(16, 1, 1)]
void UpdateAgents(uint3 id : SV_DispatchThreadID){
    if(id.x >= numAgents) { return; }

    Agent agent = agents[id.x];
	
	TeamSettings currentTeamSettings = teamSettings[0];
	if(agent.speciesMaskAndTrailType.y == 1)
		currentTeamSettings = teamSettings[1];
	else if(agent.speciesMaskAndTrailType.z == 1)
		currentTeamSettings = teamSettings[2];

	uint random = hash(agent.position.y * width + agent.position.x + hash(id.x + time * 100000));

	float weightForward = sense(agent, 0, currentTeamSettings);
	float weightLeft = sense(agent, 1, currentTeamSettings);
	float weightRight = sense(agent, -1, currentTeamSettings);
    float randomSteerStrength = scaleToRange01(random);
	float turnSpeed = currentTeamSettings.turnFactor * 2 * 3.1415;
	float oldAngle = agent.angle;
	int holdingObstruction = agent.speciesMaskAndTrailType.w;

	//Continue at current angle if inside obstruction
	//if(GetObstructed(int2(agent.position.xy)) > 0){ }
    // Continue in same direction
	if (weightForward > weightLeft && weightForward > weightRight) {
		agents[id.x].angle += 0;
	}
	else if (weightForward < weightLeft && weightForward < weightRight) {
		agents[id.x].angle += (randomSteerStrength - 0.5) * 2 * turnSpeed * deltaTime;
	}
	// Turn right
	else if (weightRight > weightLeft) {
		agents[id.x].angle -= randomSteerStrength * turnSpeed * deltaTime;
	}
	// Turn left
	else if (weightLeft > weightRight) {
		agents[id.x].angle += randomSteerStrength * turnSpeed * deltaTime;
	}

    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + direction *currentTeamSettings.moveSpeed * deltaTime;


	int2 center = int2(width / 2, height / 2);
	int manhattanX = manhattan((int2)newPos, redHome.xy);
	int manhattanY = manhattan((int2)newPos, greenHome.xy);
	int manhattanZ = manhattan((int2)newPos, blueHome.xy);
	if(GetObstructed(int2(agent.position.xy)) == 0 && GetObstructed(int2(newPos)) > 0){
		//PICKUP
		//DISABLED
		if(false && !holdingObstruction){
			random = hash(random);
			if(scaleToRange01(random) < 1 && ObstructionMap[int2(newPos)] > 0){
				if (agents[id.x].speciesMaskAndTrailType.x > 0 && manhattanX > redHome.z) {
					ObstructionMap[int2(newPos)] = 0;
					agents[id.x].speciesMaskAndTrailType.w = 1;
				}
				else if (agents[id.x].speciesMaskAndTrailType.y > 0 && manhattanY > greenHome.z) {
					ObstructionMap[int2(newPos)] = 0;
					agents[id.x].speciesMaskAndTrailType.w = 1;
				}
				else if (agents[id.x].speciesMaskAndTrailType.z > 0 && manhattanZ > blueHome.z) {
					ObstructionMap[int2(newPos)] = 0;
					agents[id.x].speciesMaskAndTrailType.w = 1;
				}
				
			}
		} 
			//If attempt to enter obstruction, reset to previous position and pick new direction.
			random = hash(random);
			float randomAngle = scaleToRange01(random) * 2 * 3.1415;

			newPos = agent.position;
			agents[id.x].angle = randomAngle;
	} else {
		//DROP
			//DISABLED
		if(false && holdingObstruction && ObstructionMap[int2(newPos)] == 0 && (PlayerMap[int2(newPos)].x == 0 && PlayerMap[int2(newPos)].y == 0 && PlayerMap[int2(newPos)].z == 0)){
			random = hash(random);

			if(agents[id.x].speciesMaskAndTrailType.x > 0 && manhattanX < redHome.z){
				ObstructionMap[int2(newPos)] = 1;
				agents[id.x].speciesMaskAndTrailType.w = 0;
			} else if(agents[id.x].speciesMaskAndTrailType.y > 0 && manhattanY < greenHome.z){
				ObstructionMap[int2(newPos)] = 1;
				agents[id.x].speciesMaskAndTrailType.w = 0;
			} else if(agents[id.x].speciesMaskAndTrailType.z > 0 && manhattanZ < blueHome.z){
				ObstructionMap[int2(newPos)] = 1;
				agents[id.x].speciesMaskAndTrailType.w = 0;
			}
		}
	}

	

	// Agent collission
	// else if(PlayerMap[int2(newPos)].x > 0 || PlayerMap[int2(newPos)].y || PlayerMap[int2(newPos)].z){
	// 	newPos = agent.position;
	// }
	

    // Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= (uint)width || newPos.y < 0 || newPos.y >= (uint)height) {
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		newPos.x = min(width-1,max(0, newPos.x));
		newPos.y = min(height-1,max(0, newPos.y));
		agents[id.x].angle = randomAngle;
	} else {
		float4 oldTrail = TrailMap[int2(newPos)];
		int4 trailType = agents[id.x].speciesMaskAndTrailType;
		// trailType.w = 1;
		// //If holding
		// if(agents[id.x].speciesMaskAndTrailType.w != 0){
		// 	trailType = agents[id.x].speciesMaskAndTrailType;
		// 	trailType.w = 0;
		// }
    	TrailMap[int2(newPos)] = min(1, oldTrail + trailType * deltaTime);
	}

    agents[id.x].position = newPos;
	PlayerMap[agents[id.x].position.xy] = agent.speciesMaskAndTrailType;
}

// kernel 1
#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = TrailMap[id.xy];
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(width-1, max(0, id.x + offsetX));
			int sampleY = min(height-1, max(0, id.y + offsetY));
			sum += TrailMap[int2(sampleX,sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
	DiffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);
}

// kernel 2
#pragma kernel ColorMap

RWTexture2D<float4> Result;
[numthreads(8,8,1)]
void ColorMap (uint3 id : SV_DispatchThreadID){
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

    Result[id.xy] = ColorLerp(TrailMap[id.xy]);
}

// kernel 3
#pragma kernel ObstructionGeneration

[numthreads(8,8,1)]
void ObstructionGeneration (uint3 id : SV_DispatchThreadID){
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	uint random = hash(time);
	int n = floor(scaleToRange01(random) * 12.0) + 1;
	float angle = 2 * 3.1415 / n;
	if(n > 1){
		for(int i = 0; i < n; i++){
			float theta = angle * i;
			float2 center = float2((width / 2.0) + cos(theta) * (height / 4.0), (height / 2.0) + sin(theta) * (height / 4.0));
		
			float manhattan = abs(center.x - id.x) + abs(center.y - id.y);
			if (manhattan < 150 / n)
				ObstructionMap[id.xy] = 1;
		}	
	} else if(n == 1){
		float2 center = float2(width / 2.0, height / 2.0);

		float manhattan = abs(center.x - id.x) + abs(center.y - id.y);
		if (manhattan < 75)
			ObstructionMap[id.xy] = 1;
	}
	

	
}
